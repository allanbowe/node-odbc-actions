# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Build Binaries

on:
  push:
    branches: [ master ]

jobs:
  build-windows:

    runs-on: windows-latest

    strategy:
      matrix:
        node-version: [10.x, 12.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci --production
    - name: Package Binary
      run: ./node_modules/.bin/node-pre-gyp package
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: binary
        path: build/stage/*.tar.gz

  build-ubuntu:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x, 12.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci --production
    - name: Package Binary
      run: ./node_modules/.bin/node-pre-gyp package
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: binary
        path: build/stage/*.tar.gz

  build-macos:

    runs-on: macos-latest

    strategy:
      matrix:
        node-version: [10.x, 12.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci --production
    - name: Package Binary
      run: ./node_modules/.bin/node-pre-gyp package
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: binary
        path: build/stage/*.tar.gz

  create-release:

    runs-on: ubuntu-latest

    needs: [build-windows, build-ubuntu, build-macos]

    steps:
    - name: Get package.json version
      run: "PACKAGE_VERSION=$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[",]//g' | tr -d '[[:space:]]')"
      # run: echo ::set-output name=current-version::$PACKAGE_VERSION
      # run: echo $PACKAGE_VERSION

    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: ${{ github.ref }}
    #     release_name: Release ${{ github.ref }}
    #     draft: false
    #     prerelease: false
    # - name: Upload Release Asset
    #   id: upload-release-asset 
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
    #     asset_path: ./my-artifact.zip
    #     asset_name: my-artifact.zip
    #     asset_content_type: application/zip